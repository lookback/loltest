import fs from 'fs';
import path from 'path';
import { AssertionError } from 'assert';
import { scan } from "./lib/scan";
import { flatten } from './lib/flatten';
import { serializeError } from './lib/serialize-error';
// test() puts tests into here. This is *per file*.
export const foundTests = [];
const sendMessage = async (msg) => {
    if (!process.send) {
        console.warn('Not in child process, cannot send message');
        return;
    }
    await new Promise((rs) => process.send(msg, rs));
};
// Child process test runner
export const runChild = async (conf) => {
    // tslint:disable-next-line:no-let
    let uncaughtException = false, unhandledRejection = false;
    process.on('uncaughtException', (e) => {
        console.log('Uncaught exception:', e);
        uncaughtException = true;
    });
    process.on('unhandledRejection', (e) => {
        console.log('Unhandled promise rejection:', e);
        unhandledRejection = true;
    });
    const testFilePaths = getTestPaths(conf.target);
    const allTestFiles = testFilePaths.map(testPath => {
        require(testPath);
        return {
            filePath: testPath,
            // "foundTests" is now filled with TestRuns. Remove them from the array
            // for next test file.
            tests: foundTests.splice(0, foundTests.length),
        };
    });
    const testFiles = !!conf.testFilter
        ? getFilteredTests(allTestFiles, conf.testFilter)
        : allTestFiles;
    const numFiles = testFiles.length;
    const totalNumTests = testFiles.reduce((acc, testFile) => acc + testFile.tests.length, 0);
    await sendMessage({
        kind: 'run_start',
        payload: {
            numFiles,
            total: totalNumTests,
        },
    });
    const startTime = Date.now();
    const allTests = testFiles.map(doTest);
    const results = await Promise.all(allTests);
    const flat = flatten(results);
    const testsAsBooleans = flat.map(t => !t.fail);
    const allGood = testsAsBooleans.every(p => p);
    const clean = allGood && !uncaughtException && !unhandledRejection;
    const finishedMsg = {
        kind: 'run_complete',
        payload: {
            total: testsAsBooleans.length,
            passed: testsAsBooleans.filter(p => p).length,
            failed: testsAsBooleans.filter(p => !p).length,
            duration: Date.now() - startTime,
            numFiles,
        },
    };
    await sendMessage(finishedMsg);
    process.exit(clean ? 0 : 1);
};
/** Apply a text filter on **test case** titles in a list of files. Only test files
 * whose test cases pass the filter will be returned.
 */
const getFilteredTests = (testFiles, filter) => {
    const re = new RegExp(filter);
    return testFiles
        .map(t => ({
        ...t,
        tests: t.tests.filter(tt => re.test(tt.name)),
    }))
        .filter(t => t.tests.length > 0);
};
const getTestPaths = (target) => {
    try {
        const stat = fs.statSync(target);
        if (stat.isFile()) {
            return [target];
        }
        else if (stat.isDirectory()) {
            return scan(target).map(n => path.join(target, n));
        }
        throw new Error('Neither file nor directory');
    }
    catch (err) {
        console.error(`Cannot find directory: ${target}`);
        return process.exit(1);
    }
};
/** foo/bar/baz.txt -> bar/baz.txt */
const fileNameWithParent = (filePath) => {
    const [file, parent,] = filePath.split(path.sep).reverse();
    return path.join(parent, file);
};
const doTest = (testFile) => {
    const testFileName = fileNameWithParent(testFile.filePath);
    const tests = testFile.tests;
    if (!tests.length) {
        sendMessage({
            kind: 'test_error',
            reason: `${testFileName}: No tests found`,
        });
        return Promise.resolve([]);
    }
    const all = tests.map(async ({ name, before, testfn, after }, index) => {
        const testCase = {
            title: name,
            fileName: testFileName,
            index,
        };
        // run before and save the args
        const args = await tryRun(testFileName, name, before);
        if (isFail(args)) {
            console.log(`Error before ${name} in ${testFileName}: ${formatError(args.error)}`);
            return {
                name,
                filename: testFileName,
                fail: true,
                error: args.error,
                duration: 0,
            };
        }
        const testResult = await tryRun(testFileName, name, async () => {
            sendMessage({
                kind: 'test_start',
                payload: testCase,
            });
            const startedAt = Date.now();
            await testfn(args);
            const duration = Date.now() - startedAt;
            return {
                name,
                filename: testFileName,
                fail: false,
                duration,
            };
        });
        sendMessage({
            kind: 'test_result',
            payload: {
                testCase,
                passed: !testResult.fail,
                error: testResult.error ? serializeError(testResult.error) : undefined,
                duration: testResult.duration,
            },
        });
        // always run AFTER, regardless of testResult.
        await tryRun(testFileName, name, () => after ? after(args).catch((err) => {
            console.log(`Error after ${name} in ${testFileName}: ${formatError(err)}`);
        }) : undefined);
        return testResult;
    });
    return Promise.all(all);
};
const isFail = (t) => !!t && !!t.fail;
const tryRun = (testFile, name, fn) => Promise.resolve().then(fn)
    .catch((err) => ({
    name,
    fail: true,
    filename: testFile,
    error: err,
    duration: 0,
}));
const formatError = (e) => {
    if (e instanceof Error) {
        if (e.stack) {
            const c = e.stack.split('\n');
            const t = e instanceof AssertionError ? e.message : c[0];
            return [t, c[1]].join('\n');
        }
        else {
            return e.message;
        }
    }
    return e;
};
//# sourceMappingURL=data:application/json;base64,