import path from 'path';
import { foundTests, runChild } from './child';
import { runMain } from './main';
import { mkParseArgs } from './lib/parse-cli-args';
import { yellow } from './lib/colorize';
import { envToConf } from './lib/env-to-config';
import { parseGlobalConf } from './lib/global-conf';
/** The directory in which to search for test files. */
const DEFAULT_TEST_DIR = 'test';
/** Directory (under TEST_DIR) where we output files to */
const DEFAULT_BUILD_DIR = 'build';
const parseArgs = mkParseArgs({}, ['fileFilter', 'testFilter']);
const createTest = (name, obj) => {
    if (foundTests.find((t) => t.name === name)) {
        console.error(yellow(`Duplicate test case name: "${name}"`));
        process.exit(1);
    }
    if (typeof obj[0] === 'function') {
        if (obj.length === 1) {
            return {
                name,
                testfn: obj[0],
            };
        }
        else {
            return {
                name,
                before: obj[0],
                testfn: obj[1],
                after: obj[2],
            };
        }
    }
    else {
        return {
            name,
            ...obj[0],
        };
    }
};
export const test = (name, ...as) => {
    foundTests.push(createTest(name, as));
};
const argv = process.argv;
// fish out the childrunner start arg
const runConf = (() => {
    const n = argv.indexOf('--child-runner');
    const b = argv.indexOf('--build-dir');
    const i = argv.indexOf('--ident');
    const f = argv.indexOf('--test-filter'); // Optional
    return n >= 0
        ? {
            target: argv[n + 1],
            buildDir: argv[b + 1],
            ident: argv[i + 1],
            testNameFilter: f !== -1 ? argv[f + 1] : undefined,
        }
        : null;
})();
/** Switch depending on whether we're the forked child or not. */
if (runConf) {
    // run as child
    runChild(runConf).catch((e) => {
        console.log('Tests failed', e);
        process.exit(1);
    });
}
else {
    // Read conf from ~/.loltest
    const globalConf = parseGlobalConf('.loltest');
    // Read local conf from env vars
    const envConf = envToConf(process.env, [
        'LOLTEST_REPORTER',
        'LOLTEST_TEST_DIR',
        'LOLTEST_BUILD_DIR',
        'LOLTEST_MAX_CHILD_COUNT',
    ]);
    const testDir = path.relative(process.cwd(), path.join(process.cwd(), envConf.loltestTestDir || globalConf.testDir || DEFAULT_TEST_DIR));
    const buildDir = path.relative(process.cwd(), path.join(process.cwd(), testDir, envConf.loltestBuildDir || globalConf.buildDir || DEFAULT_BUILD_DIR));
    const maxChildCount = (envConf.loltestMaxChildCount &&
        parseInt(envConf.loltestMaxChildCount)) ||
        require('os').cpus().length;
    const reporter = envConf.loltestReporter || globalConf.reporter || 'loltest';
    const conf = {
        ...globalConf,
        reporter,
        testDir,
        buildDir,
        maxChildCount,
    };
    const pathToSelf = argv[1]; // 0 is nodejs itself
    const cliArgs = parseArgs(argv.slice(2));
    runMain(pathToSelf, {
        filter: cliArgs.fileFilter,
        testFilter: cliArgs.testFilter,
        ...conf,
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFvQixNQUFNLFNBQVMsQ0FBQztBQUNqRSxPQUFPLEVBQUUsT0FBTyxFQUFvQixNQUFNLFFBQVEsQ0FBQztBQUNuRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFcEQsdURBQXVEO0FBQ3ZELE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDO0FBQ2hDLDBEQUEwRDtBQUMxRCxNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQztBQUVsQyxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsRUFBRSxFQUFFLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7QUFrQ2hFLE1BQU0sVUFBVSxHQUFHLENBQUMsSUFBWSxFQUFFLEdBQVEsRUFBVyxFQUFFO0lBQ25ELElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsRUFBRTtRQUN6QyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyw4QkFBOEIsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzdELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbkI7SUFFRCxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLFVBQVUsRUFBRTtRQUM5QixJQUFJLEdBQUcsQ0FBQyxNQUFN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