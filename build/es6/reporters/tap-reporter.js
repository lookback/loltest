import { basename } from 'path';
import { isPlainObject } from "../lib/is-plain-object";
const getStackInfo = (stack) => {
    const stackArr = stack.split('\n');
    const stackLine = stackArr[0].includes('ERR_ASSERTION') ? stackArr[1] : stackArr[0];
    const match = stackLine.match(/\((\/.*)\)/);
    if (!match) {
        return stackLine;
    }
    const base = basename(match[1]);
    const [, file, line, column] = base.match(/(.*):(\d+):(\d+)/) || [];
    return { file, line, column };
};
const formatError = (error) => {
    const stack = error.stack ? getStackInfo(error.stack) : undefined;
    return {
        error: error.name,
        message: error.message,
        at: stack ? stack : undefined,
    };
};
const toYAML = (obj, indent = 0) => Object.entries(obj)
    .map(([key, val]) => `${' '.repeat(indent)}${key}: ${isPlainObject(val)
    ? `\n${toYAML(val, indent + 3)}`
    : String(val)}`)
    .join(`\n`);
const outputDiagnostics = (obj) => `
   ---
${toYAML(obj, 3)}
   ...
`;
const logSuccess = (title, index) => `ok ${index + 1} - ${title}`;
const logFailure = (title, index, error) => `not ok ${index + 1} - ${title}` + (error ? outputDiagnostics(formatError(error)) : '');
const outputDirectives = ({ duration }) => `${duration !== 0 ? ' # time=' + duration + 'ms' : ''}`;
const TAPReporter = {
    startRun: ({ numFiles, total }) => `TAP version 13\n1..${total}`,
    test: ({ title, passed, index, error, duration }) => '\n' + (passed ? logSuccess(title, index) : logFailure(title, index, error)) +
        outputDirectives({ duration }),
    finishRun: () => {
        return "";
    },
    bail: reason => 
    // This is lol: http://testanything.org/tap-version-13-specification.html#bail-out
    `Bail out! ${reason}`,
};
export default TAPReporter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFwLXJlcG9ydGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JlcG9ydGVycy90YXAtcmVwb3J0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUdoQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFdkQsTUFBTSxZQUFZLEdBQUcsQ0FBQyxLQUFhLEVBQTZELEVBQUU7SUFDOUYsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRixNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBRTVDLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDUixPQUFPLFNBQVMsQ0FBQztLQUNwQjtJQUVELE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxHQUFhLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFOUUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDbEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFzQixFQUFVLEVBQUU7SUFDbkQsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FB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