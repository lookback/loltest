import { basename } from 'path';
import { isPlainObject } from '../lib/is-plain-object';
const getStackInfo = (stack) => {
    const stackArr = stack.split('\n');
    const stackLine = stackArr[0].includes('ERR_ASSERTION')
        ? stackArr[1]
        : stackArr[0];
    const match = stackLine.match(/\((\/.*)\)/);
    if (!match) {
        return stackLine;
    }
    const base = basename(match[1]);
    const [, file, line, column] = base.match(/(.*):(\d+):(\d+)/) || [];
    return { file, line, column };
};
const formatError = (error) => {
    const stack = error.stack ? getStackInfo(error.stack) : undefined;
    return {
        error: error.name,
        message: error.message,
        at: stack ? stack : undefined,
    };
};
const toYAML = (obj, indent = 0) => Object.entries(obj)
    .map(([key, val]) => `${' '.repeat(indent)}${key}: ${isPlainObject(val)
    ? `\n${toYAML(val, indent + 3)}`
    : String(val)}`)
    .join(`\n`);
const outputDiagnostics = (obj) => `
   ---
${toYAML(obj, 3)}
   ...
`;
const logSuccess = (title, index) => `ok ${index + 1} - ${title}`;
const logFailure = (title, index, error) => `not ok ${index + 1} - ${title}` +
    (error ? outputDiagnostics(formatError(error)) : '');
const outputDirectives = ({ duration }) => `${duration !== 0 ? ' # time=' + duration + 'ms' : ''}`;
const TAPReporter = {
    onCompileStart: (out) => out(),
    onCompileEnd: (_, out) => out(),
    onRunStart: ({ numFiles, total }, out) => out(`TAP version 13\n1..${total}`),
    onTestStart: (_, out) => out(),
    onTestResult: ({ testCase, passed, error, duration }, out) => out('\n' +
        (passed
            ? logSuccess(testCase.title, testCase.index)
            : logFailure(testCase.title, testCase.index, error)) +
        outputDirectives({ duration })),
    onRunComplete: (_, out) => out(''),
    onError: (reason, error, out) => 
    // This is lol: http://testanything.org/tap-version-13-specification.html#bail-out
    out(`Bail out! ${reason}`),
};
export default TAPReporter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFwLXJlcG9ydGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JlcG9ydGVycy90YXAtcmVwb3J0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUdoQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFdkQsTUFBTSxZQUFZLEdBQUcsQ0FDakIsS0FBYSxFQUM0QyxFQUFFO0lBQzNELE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbkMsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUM7UUFDbkQsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDYixDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xCLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7SUFFNUMsSUFBSSxDQUFDLEtBQUssRUFBRTtRQUNSLE9BQU8sU0FBUyxDQUFDO0tBQ3BCO0lBRUQsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLEdBQ3hCLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFekMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDbEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFzQixFQUFVLEVBQUU7SUFDbkQsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEtBQUss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