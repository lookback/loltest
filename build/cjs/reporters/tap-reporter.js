"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable no-object-mutation
const path_1 = require("path");
const is_plain_object_1 = require("../lib/is-plain-object");
const getStackInfo = (stack) => {
    const stackArr = stack.split('\n');
    const stackLine = stackArr[0].includes('ERR_ASSERTION')
        ? stackArr[1]
        : stackArr[0];
    const match = stackLine.match(/\((\/.*)\)/);
    if (!match) {
        return stackLine;
    }
    const base = path_1.basename(match[1]);
    const [, file, line, column] = base.match(/(.*):(\d+):(\d+)/) || [];
    return { file, line, column };
};
const formatError = (error) => {
    const stack = error.stack ? getStackInfo(error.stack) : undefined;
    return {
        error: error.name,
        message: error.message,
        at: stack ? stack : undefined,
    };
};
const toYAML = (obj, indent = 0) => Object.entries(obj)
    .map(([key, val]) => `${' '.repeat(indent)}${key}: ${is_plain_object_1.isPlainObject(val)
    ? `\n${toYAML(val, indent + 3)}`
    : String(val)}`)
    .join(`\n`);
const outputDiagnostics = (obj) => `
   ---
${toYAML(obj, 3)}
   ...
`;
const logSuccess = (title, index) => `ok ${index} - ${title}`;
const logFailure = (title, index, error) => `not ok ${index} - ${title}` +
    (error ? outputDiagnostics(formatError(error)) : '');
const outputDirectives = ({ duration }) => `${duration !== 0 ? ' # time=' + duration + 'ms' : ''}`;
const TAPReporter = {
    currentIndex: 0,
    totalNumTests: 0,
    onCompileStart: (out) => out(),
    onCompileEnd: (_, out) => out(),
    onInit() { },
    onRunStart(_, out) {
        out(`TAP version 13`);
    },
    onTestStart(_, __) {
        this.totalNumTests++;
    },
    onTestResult({ testCase, passed, error, duration }, out) {
        this.currentIndex++;
        out('\n' +
            (passed
                ? logSuccess(testCase.title, this.currentIndex)
                : logFailure(testCase.title, this.currentIndex, error)) +
            outputDirectives({ duration }));
    },
    // http://testanything.org/tap-version-13-specification.html#the-plan
    onRunComplete(out) {
        out(`1..${this.totalNumTests}`);
    },
    onError: (error, out) => 
    // This is lol: http://testanything.org/tap-version-13-specification.html#bail-out
    out(`Bail out! ${error}`),
};
exports.default = TAPReporter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFwLXJlcG9ydGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JlcG9ydGVycy90YXAtcmVwb3J0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvQ0FBb0M7QUFDcEMsK0JBQWdDO0FBR2hDLDREQUF1RDtBQUV2RCxNQUFNLFlBQVksR0FBRyxDQUNqQixLQUFhLEVBQzRDLEVBQUU7SUFDM0QsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQztRQUNuRCxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNiLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbEIsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUU1QyxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ1IsT0FBTyxTQUFTLENBQUM7S0FDcEI7SUFFRCxNQUFNLElBQUksR0FBRyxlQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsR0FDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUV6QyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUNsQyxDQUFDLENBQUM7QUFFRixNQUFNLFdBQVcsR0FBRyxDQUFDLEtBQXNCLEVBQVUsRUFBRTtJQUNuRCxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFF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